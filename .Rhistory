modele1=lm(pixel~dayc+I(dayc^2))
sume1=summary(modele1)
sume1
newh = seq(0, 20, 0.50);
fit = 1052 + 9.27*newh - 0.43271*newh^2;
plot(dayc, pixel)
lines(newh, fit, lty=1, col='red')
# On voit graphiquement de maniere evidente que le modele est plus performant avec le
# dayc^2
modele2=lm(pixel~dayc)
sume2=summary(modele2)
sume2
# On confirme ce qu on intuitait precedemment. On obtient un R^2 beaucoups plus faible,
# ainsi qu une plus grande p-value. (Ici, le p-value est associee au test dont l hypothese
# nulle est que les coefficients sont non significatifs.)
# On compare ensuite le modele avec ceux prenant en compte Side :
modele3=lm(pixel~Side+dayc+I(dayc^2)+Side*dayc)
sume3=summary(modele3)
sume3
modele4=lm(pixel~dayc+I(dayc^2)+Side:dayc+Side:I(dayc^2))
sume4=summary(modele4)
sume4
#Les tests concernant les coefficients de Side et d'interaction avec Side,
# ne sont pas significatifs. On ne peut pas conclure sur un effet de Side
# sur la regression lineaire.
# On finit de comparer les modeles avec AIC.
AIC(modele1)
AIC(modele3)
AIC(modele4)
BIC(modele1)
BIC(modele3)
BIC(modele4)
# On choisit de garder le modele 1, car il est plus performant que tous les autres modeles.
confint(modele1)
par(mfrow = c(2,2))
plot(modele1)
par(mfrow = c(1,1))
# On voit avec le schema QQ-plot que la normalite des residus est respectee.
# Les residus sont bien independants et de meme variances, on le voit avec le schema
# Scale location.
# Toutes les valeurs sont comprises a l interieur des lignes Cooks distances, il n y a donc
# pas de valeurs influant sur la regression.
# Chunk 5
modele1=lm(pixel~dayc+I(dayc^2)+I(dayc^3))
sume1=summary(modele1)
sume1
modele1=lm(pixel~dayc+I(dayc^2)+I(dayc^3))
sume1=summary(modele1)
sume1
# Chunk 1
rm(list=ls())
# Chunk 2
library(nlme)
library(lsmeans)
library(plyr)
data(Pixel)
head(Pixel)
Pixel$dayc=Pixel$day
Pixel$day=as.factor(Pixel$day)
Pixel$day<-revalue(Pixel$day, c("0"="1", "1"="2","2"="3","4"="4","6"="5","8"="6","10"="7","14"="8","21"="9"))
levels(Pixel$day)
summary(Pixel)
par(mfrow=c(1,1))
attach(Pixel)
# Chunk 3
table(Dog)
Dog<-ordered(Dog,levels=c("1","2","3","4","5","6","7","8","9","10"))
table(Dog)
barplot(table(Dog))
# Chunk 4
table(Side)
Side<-ordered(Side,levels=c("L","R"))
day<-ordered(day,levels=c("1","2","3","4","5","6","7","8","9"))
table(day)
summary(dayc)
table(dayc)
# Chunk 5
par(mfrow = c(1,2))
boxplot(dayc)
hist(dayc)
# Chunk 6
quantile(dayc)
sd(dayc)
mean(dayc)
summary(pixel)
boxplot(pixel)
hist(pixel)
quantile(pixel)
sd(pixel)
mean(pixel)
# Chunk 7
# Pixel,Side
boxplot(pixel~Side)
# Chunk 8
sd(pixel[Side=="L"])
sd(pixel[Side=="R"])
# variance un peu pres egale
summary(aov(pixel~Side))
# Ok
# effectifs superieurs a 30
# Conditions pour faire test de student ok.
t.test(pixel~Side,var.equal=TRUE)
# p=0.4
# Les moyennes ne sont pas significativements differentes
# Pixel, Dog
boxplot(pixel~Dog)
# Chunk 9
# Day, Dog
boxplot(dayc~Dog)
# Chunk 10
# pixel, day
boxplot(pixel~day)
# Chunk 11
boxplot(pixel~Side*day)
# Chunk 12
boxplot(pixel~Side*Dog)
# Chunk 13
modele1=lm(pixel~dayc+I(dayc^2)+I(dayc^3))
sume1=summary(modele1)
sume1
newh = seq(0, 20, 0.50);
fit = 1052 + 9.27*newh - 0.43271*newh^2;
plot(dayc, pixel)
lines(newh, fit, lty=1, col='red')
# Chunk 14
modele2=lm(pixel~dayc)
sume2=summary(modele2)
sume2
# Chunk 15
modele3=lm(pixel~Side+dayc+I(dayc^2)+Side)
sume3=summary(modele3)
sume3
modele4=lm(pixel~dayc+I(dayc^2)+Side:dayc+Side:I(dayc^2)+Side)
sume4=summary(modele4)
sume4
# Chunk 16
AIC(modele1)
AIC(modele3)
AIC(modele4)
BIC(modele1)
BIC(modele3)
BIC(modele4)
# Chunk 17
confint(modele1)
par(mfrow = c(2,2))
plot(modele1)
par(mfrow = c(1,1))
modele1=lm(pixel~dayc+I(dayc^2)+I(dayc^3))
sume1=summary(modele1)
sume1
modele1=lm(pixel~dayc+I(dayc^2))
sume1=summary(modele1)
sume1
AIC(modele1)
AIC(modele3)
AIC(modele4)
BIC(modele1)
BIC(modele3)
modele1=lm(pixel~dayc+I(dayc^2)+I(dayc^3))
sume1=summary(modele1)
sume1
AIC(modele1)
BIC(modele1)
confint(modele1)
par(mfrow = c(2,2))
plot(modele1)
par(mfrow = c(1,1))
ID1=read.csv(file=«ID1.txt»,header=TRUE,sep=« , »)
ID1=read.csv(file=«ID1.txt»,header=TRUE,sep=" , ")
ID1=read.csv(file="ID1.txt",header=TRUE,sep=" , ")
ID1=read.csv(file="ID1.txt",header=TRUE,sep=" , ")
ID1=read.csv(file="ID1.txt",header=TRUE,sep=" , ")
ID1=read.csv(file="ID1.txt",header=TRUE,sep=" , ")
ID1=read.csv(file="ID1.txt/",header=TRUE,sep=" , ")
ID1=read.csv(file="/ID1.txt/",header=TRUE,sep=" , ")
ID1=read.csv(file="./ID1.txt/",header=TRUE,sep=" , ")
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
ID1=read.csv(file="ID1.txt",header = TRUE, sep=",")
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
hist(ID1$duree)
summary(ID1)
boxplot(ID1$duree)
# eliminer les durees negatives
ID1sansmouv=ID1[ID1$distance<=200.]
ID1=read.csv(file="ID1.txt",header = TRUE, sep=",")
ID1=read.csv(file="ID1.txt",header = TRUE, sep=",")
ID1=read.csv(file="ID1.txt",header = TRUE, sep=",")
ID1=read.csv(file="C:\Users\asus\Desktop\SmartphoneData\ID1.txt",header = TRUE, sep=",")
ID1=read.csv(file="\Users\asus\Desktop\SmartphoneData\ID1.txt",header = TRUE, sep=",")
ID1=read.csv(file="/Users/asus/Desktop/SmartphoneData/ID1.txt",header = TRUE, sep=",")
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
rm(list=ls())
ID1=read.csv(file="/Users/asus/Desktop/SmartphoneData/ID1.txt",header = TRUE, sep=",")
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
hist(ID1$duree)
summary(ID1)
boxplot(ID1$duree)
ID1sansmouv=ID1[ID1$distance<=200.]
ID1sansmouv=ID1[ID1$distance<=200.]
ID1sansmouv=ID1[ID1$distance<=200.]
ID1sansmouv=ID1
ID1sansmouv=ID1[ID1$distance<100,]
view(ID1sansmouv)
View(ID1sansmouv)
A1=ID1[(ID1$distance<100) & (ID1$duree<100) ,]
View(ID1sansmouv)
View(A1)
length(A1)
dim(A1)
plot(A1$longitude,A1$latitude)
A11=A1[A1$longitude<2]
A12=A1[A1$longitude>2]
A11=A1[A1$longitude<2,]
A12=A1[A1$longitude>2,]
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A12$longitude,A12$latitude)
A11=A1[(A1$longitude<2),]
A1=ID1[(ID1$distance<100) & (ID1$duree<100) ,]
View(A1)
plot(A1$longitude,A1$latitude)
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A12$longitude,A12$latitude)
plot(A1$longitude,A1$latitude)
plot(A11$longitude,A11$latitude)
plot(A1$longitude,A1$latitude)
plot(A11$longitude,A11$latitude)
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A1$longitude,A1$latitude)
plot(A12$longitude,A12$latitude)
help("write.table")
write.table(AD11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
write.table(AD12, file="hot_spotA12.txt", sep=",", row.names=FALSE)
write.table(A11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
write.table(A12, file="hot_spotA12.txt", sep=",", row.names=FALSE)
write.table(A11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
getwd
getwd()
setwd("/Users/asus/Desktop/SmartphoneData/)
ID1=read.csv(file="/Users/asus/Desktop/SmartphoneData/ID1.txt",header = TRUE, sep=",")
# Question 1 ----
#Une attaque de type « BeginEnd » qui essaye d'identifier les points d'intérêts d'un individu
#en découvrant des "trous" dans les traces de mobilité et en considérant le point d'arrivée
#et de départ avant ce trou comme des points d'intérêts possibles. Voir les heuristiques du
#cours GeoPrivacy pour plus de détails.
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
hist(ID1$duree)
summary(ID1)
# eliminer les durees negatives
# ID1$duree[ID1$duree<=0]
# A1 correspond a ID1 pour des distances et durees courtes
A1=ID1[(ID1$distance<100) & (ID1$duree<100) ,]
View(A1)
dim(A1)
plot(A1$longitude,A1$latitude)
# On distingue deux clusters vraiments eloignees :
A11=A1[(A1$longitude<2),]
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
help("write.table")
write.table(A11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
write.table(A12, file="hot_spotA12.txt", sep=",", row.names=FALSE)
setwd("/Users/asus/Desktop/SmartphoneData/)
ID1=read.csv(file="/Users/asus/Desktop/SmartphoneData/ID1.txt",header = TRUE, sep=",")
# Question 1 ----
#Une attaque de type « BeginEnd » qui essaye d'identifier les points d'intérêts d'un individu
#en découvrant des "trous" dans les traces de mobilité et en considérant le point d'arrivée
#et de départ avant ce trou comme des points d'intérêts possibles. Voir les heuristiques du
#cours GeoPrivacy pour plus de détails.
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
hist(ID1$duree)
summary(ID1)
# eliminer les durees negatives
# ID1$duree[ID1$duree<=0]
# A1 correspond a ID1 pour des distances et durees courtes
A1=ID1[(ID1$distance<100) & (ID1$duree<100) ,]
View(A1)
dim(A1)
plot(A1$longitude,A1$latitude)
# On distingue deux clusters vraiments eloignees :
A11=A1[(A1$longitude<2),]
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
help("write.table")
write.table(A11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
write.table(A12, file="hot_spotA12.txt", sep=",", row.names=FALSE)
setwd("/Users/asus/Desktop/SmartphoneData/)
ID1=read.csv(file="/Users/asus/Desktop/SmartphoneData/ID1.txt",header = TRUE, sep=",")
# Question 1 ----
#Une attaque de type « BeginEnd » qui essaye d'identifier les points d'intérêts d'un individu
#en découvrant des "trous" dans les traces de mobilité et en considérant le point d'arrivée
#et de départ avant ce trou comme des points d'intérêts possibles. Voir les heuristiques du
#cours GeoPrivacy pour plus de détails.
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
hist(ID1$duree)
summary(ID1)
# eliminer les durees negatives
# ID1$duree[ID1$duree<=0]
# A1 correspond a ID1 pour des distances et durees courtes
A1=ID1[(ID1$distance<100) & (ID1$duree<100) ,]
View(A1)
dim(A1)
plot(A1$longitude,A1$latitude)
# On distingue deux clusters vraiments eloignees :
A11=A1[(A1$longitude<2),]
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
write.table(A11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
write.table(A12, file="hot_spotA12.txt", sep=",", row.names=FALSE)
rm(list=ls())
setwd("/Users/asus/Desktop/SmartphoneData/)
ID1=read.csv(file="/Users/asus/Desktop/SmartphoneData/ID1.txt",header = TRUE, sep=",")
# Question 1 ----
#Une attaque de type « BeginEnd » qui essaye d'identifier les points d'intérêts d'un individu
#en découvrant des "trous" dans les traces de mobilité et en considérant le point d'arrivée
#et de départ avant ce trou comme des points d'intérêts possibles. Voir les heuristiques du
#cours GeoPrivacy pour plus de détails.
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
hist(ID1$duree)
summary(ID1)
# eliminer les durees negatives
# ID1$duree[ID1$duree<=0]
# A1 correspond a ID1 pour des distances et durees courtes
A1=ID1[(ID1$distance<100) & (ID1$duree<100) ,]
View(A1)
dim(A1)
plot(A1$longitude,A1$latitude)
# On distingue deux clusters vraiments eloignees :
A11=A1[(A1$longitude<2),]
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
write.table(A11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
write.table(A12, file="hot_spotA12.txt", sep=",", row.names=FALSE)
setwd("/Users/asus/Desktop/SmartphoneData/")
ID1=read.csv(file="/Users/asus/Desktop/SmartphoneData/ID1.txt",header = TRUE, sep=",")
ID1$duree=ID1$time
ID1$duree[1]=0.
for (i in 2:length(ID1$duree)){
ID1$duree[i]=ID1$time[i]-ID1$time[i-1]
}
R=6370000;
ID1$distance=ID1$latitude
ID1$distance[1]=0.
for (i in 2:length(ID1$distance)){
ID1$distance[i]=R*acos(cos(ID1$latitude[i]*pi/180)*cos(ID1$latitude[i-1]*pi/180)*cos((ID1$longitude[i-1]*pi/180)-(ID1$longitude[i]*pi/180))+sin(ID1$latitude[i]*pi/180)*sin(ID1$latitude[i-1]*pi/180))
}
View(ID1)
hist(ID1$duree)
summary(ID1)
A1=ID1[(ID1$distance<100) & (ID1$duree<100) ,]
View(A1)
dim(A1)
plot(A1$longitude,A1$latitude)
A11=A1[(A1$longitude<2),]
A12=A1[(A1$longitude>2) & (A1$latitude>48),]
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
help("write.table")
write.table(A11, file="hot_spotA11.txt", sep=",", row.names=FALSE)
write.table(A12, file="hot_spotA12.txt", sep=",", row.names=FALSE)
getwd()
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
plot(A11$longitude,A11$latitude)
kmeans(cbind(A11$longitude,A11$latitude),centers = 3)
plot(A12$longitude,A12$latitude)
plot(A12$longitude,A12$latitude, col = kmeans(cbind(A11$longitude,A11$latitude),centers = 4)s$cluster)
plot(A12$longitude,A12$latitude, col = kmeans(cbind(A11$longitude,A11$latitude),centers = 4)$cluster)
kmeans(cbind(A11$longitude,A11$latitude),centers = 2)
plot(A12$longitude,A12$latitude, col = kmeans(cbind(A11$longitude,A11$latitude),centers = 4)$cluster)
plot(A12$longitude,A12$latitude)
kmA11.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 2)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
kmA11.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 1)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
plot(A12$longitude,A12$latitude)
kmA11.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 1)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
kmA11.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 4)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
plot(A12$longitude,A12$latitude)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 4)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
kmA11.res$cluster
plot(A12$longitude,A12$latitude)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 2)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
plot(A12$longitude,A12$latitude)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 3)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
plot(A12$longitude,A12$latitude)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 10)
plot(A12$longitude,A12$latitude, col = kmA11.res$cluster)
kmA11.res$cluster
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 4)
plot(A12$longitude,A12$latitude)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 4)
plot(A12$longitude,A12$latitude, col = kmA12.res$cluster)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 2)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 2)
plot(A12$longitude,A12$latitude, col = kmA12.res$cluster)
kmA11.res$centers
kmA12.res$centers
plot(A12$longitude,A12$latitude)
kmA12.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 2)
plot(A12$longitude,A12$latitude, col = kmA12.res$cluster)
kmA12.res$centers
plot(A11$longitude,A11$latitude)
plot(A12$longitude,A12$latitude)
kmA12.res=kmeans(cbind(A12$longitude,A12$latitude),centers = 4)
plot(A12$longitude,A12$latitude, col = kmA12.res$cluster)
kmA12.res=kmeans(cbind(A12$longitude,A12$latitude),centers = 3)
plot(A12$longitude,A12$latitude, col = kmA12.res$cluster)
plot(A11$longitude,A11$latitude)
kmA11.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 3)
plot(A11$longitude,A11$latitude, col = kmA11.res$cluster)
plot(A12$longitude,A12$latitude)
plot(A11$longitude,A11$latitude)
kmA11.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 3)
plot(A11$longitude,A11$latitude, col = kmA11.res$cluster)
kmA11.res=kmeans(cbind(A11$longitude,A11$latitude),centers = 2)
plot(A11$longitude,A11$latitude, col = kmA11.res$cluster)
hclust?
?hclust
help(hclust)
